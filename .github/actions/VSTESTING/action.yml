name: VSTest Reusable Workflow

inputs:
  runsOn:
    required: true
    type: string
  dotnet-version:
    required: true
    type: string
  testSelector:
    required: true
    type: string
    default: "testAssemblies"
  testAssemblyVer2:
    required: true
    type: string
  configuration:
    required: true
    type: string
  platform:
    required: false
    type: string
  code-coverage-enabled:
    required: false
    type: boolean
  test-run-title:
    required: false
    type: string
  run-in-parallel:
    required: false
    type: boolean
  testPlan:
    required: false
    type: string
  testSuite:
    required: false
    type: string
  testConfiguration:
    required: false
    type: string
  tcmTestRun:
    required: false
    type: string
  uiTests:
    required: false
    type: boolean
  vsTestVersion:
    required: false
    type: string
  vstestLocation:
    required: true
    type: string
  runSettingsFile:
    required: true
    type: string
  diagnosticsEnabled:
    required: false
    type: boolean
  rerunFailedTests:
    required: false
    type: boolean
  rerunType:
    required: false
    type: string
  rerunMaxAttempts:
    required: false
    type: string
  dontDistribute:
    required: false
    type: boolean
  searchFolder:
    required: true
    type: string
  resultsFolder:
    required: false
    type: string
    default: "./TestResults"
  testFiltercriteria:
    required: false
    type: string
  runOnlyImpactedTests:
    required: false
    type: boolean
    default: false
  runAllTestsAfterXBuilds:
    required: false
    type: string
    default: "50"

runs:
  using: 'composite'
  steps:
    - name: Restore dependencies
      shell: pwsh
      run: dotnet restore

    - name: Build solution
      shell: pwsh
      run: dotnet build --configuration ${{ inputs.configuration }} --no-restore

    - name: Debug Directory Structure
      shell: pwsh
      run: |
        # Debug: List all files in the working directory
        $workingDirectory = "${{ env.GITHUB_WORKSPACE }}"
        Set-Location -Path $workingDirectory
        Write-Host "Listing all files in the working directory:"
        Get-ChildItem -Path $workingDirectory -Recurse | ForEach-Object { Write-Host $_.FullName }

    - name: Run tests with Visual Studio Test Runner
      shell: pwsh
      env:
        SEARCH_FOLDER: ${{ inputs.searchFolder }}
        RESULTS_FOLDER: ${{ inputs.resultsFolder }}
      run: |
        # Ensure the correct working directory
        $workingDirectory = $env:SEARCH_FOLDER
        Set-Location -Path $workingDirectory

        # Convert inputs to boolean
        $codeCoverageEnabled = [bool]::Parse("${{ inputs.code-coverage-enabled }}")
        $runInParallel = [bool]::Parse("${{ inputs.run-in-parallel }}")
        $diagnosticsEnabled = [bool]::Parse("${{ inputs.diagnosticsEnabled }}")
        $rerunFailedTests = [bool]::Parse("${{ inputs.rerunFailedTests }}")
        $uiTests = [bool]::Parse("${{ inputs.uiTests }}")
        $runOnlyImpactedTests = [bool]::Parse("${{ inputs.runOnlyImpactedTests }}")

        # Resolve test assemblies from the bin directory, excluding obj folder
        $testAssemblies = Get-ChildItem -Path $workingDirectory -Recurse -File -Include *.dll |
          Where-Object { $_.FullName -notmatch 'obj' } | ForEach-Object { $_.FullName }
        if (-not $testAssemblies) {
          Write-Error "No test assemblies found."
          exit 1
        }

        # Debug: List resolved test assemblies
        Write-Host "Resolved test assemblies:"
        $testAssemblies | ForEach-Object { Write-Host $_ }

        # Verify vstest.console.exe exists
        $vstestPath = "${{ inputs.vstestLocation }}"
        if (-not (Test-Path -Path $vstestPath)) {
          Write-Error "vstest.console.exe not found at path: $vstestPath"
          exit 1
        }

        # Run VSTest for each resolved test assembly
        foreach ($testAssembly in $testAssemblies) {
          # Construct arguments for vstest.console.exe
          $vstestArgs = @()
          $vstestArgs += "`"$testAssembly`"" # Properly quote the test assembly path
          $vstestArgs += "/Settings:`"${{ inputs.runSettingsFile }}`""
          $vstestArgs += "/ResultsDirectory:`"$env:RESULTS_FOLDER`""
          if ($codeCoverageEnabled) { $vstestArgs += '/EnableCodeCoverage' }
          if ($runInParallel) { $vstestArgs += '/Parallel' }
          if ($diagnosticsEnabled) { $vstestArgs += '/Diag:logfile.txt' }
          if ($rerunFailedTests) { $vstestArgs += "/Rerun:${{ inputs.rerunType }}" }
          if (-not [string]::IsNullOrWhiteSpace("${{ inputs.testFiltercriteria }}")) { 
            $vstestArgs += "/TestCaseFilter:`"${{ inputs.testFiltercriteria }}`"" 
          }
          if ($runOnlyImpactedTests) { 
            $vstestArgs += "/ImpactedTests"
            $vstestArgs += "/RunAllTestsAfter:${{ inputs.runAllTestsAfterXBuilds }}"
          }
          if ($uiTests) { $vstestArgs += "/UITests" }

          # Execute vstest.console.exe with call operator (&)
          Write-Host "Executing: `"$vstestPath`" $($vstestArgs -join ' ')"
          & $vstestPath @vstestArgs
        }
