name: VSTest Reusable Workflow

inputs:
  runsOn:
    required: true
  dotnet-version:
    required: true
  testSelector:
    required: true
    default: "testAssemblies"
  testAssemblyVer2:
    required: true
  configuration:
    required: true
  platform:
    required: false
    default: "x64"
  code-coverage-enabled:
    required: false
    default: "true"
  test-run-title:
    required: false
    default: "Unit Tests"
  run-in-parallel:
    required: false
    default: "true"
  testPlan:
    required: false
    default: "Plan1"
  testSuite:
    required: false
    default: "SuiteA"
  testConfiguration:
    required: false
    default: "DebugConfig"
  tcmTestRun:
    required: false
    default: "1234"
  uiTests:
    required: false
    default: "false"
  vsTestVersion:
    required: false
    default: "latest"
  vstestLocation:
    required: true
    default: "C:Program FilesMicrosoft Visual Studio2022CommunityCommon7IDEExtensionsTestPlatformvstest.console.exe"
  vstestLocationMethod:
    required: false
    default: "version"
  resultsFolder:
    required: false
    default: '$(Agent.TempDirectory)TestResults'
  runSettingsFile:
    required: false
    default: '${{ github.workspace }}/tests/Test.runsettings'
  overrideTestrunParameters:
    required: false
    default: 'TestRunParameter1=Value1;TestRunParameter2=Value2'
  pathtoCustomTestAdapters:
    required: false
    default: '${{ github.workspace }}/testAdapters'
  runTestsInIsolation:
    required: false
    default: "false"
  otherConsoleOptions:
    required: false
    default: '/Logger:trx'
  collectDumpOn:
    required: false
    default: 'onAbortOnly'
  diagnosticsEnabled:
    required: false
    default: "false"
  rerunFailedTests:
    required: false
    default: "true"
  rerunType:
    required: false
    default: "specific"
  rerunMaxAttempts:
    required: false
    default: "3"
  rerunFailedThreshold:
    required: false
    default: '30'
  rerunFailedTestCasesMaxLimit:
    required: false
    default: '5'
  dontDistribute:
    required: false
    default: "false"
  distributionBatchType:
    required: false
    default: 'basedOnTestCases'
  batchingBasedOnAgentsOption:
    required: false
    default: 'autoBatchSize'
  customBatchSizeValue:
    required: false
    default: '10'
  batchingBasedOnExecutionTimeOption:
    required: false
    default: 'autoBatchSize'
  customRunTimePerBatchValue:
    required: false
    default: '60'
  publishRunAttachments:
    required: false
    default: "true"
  failOnMinTestsNotRun:
    required: false
    default: "false"
  minimumExpectedTests:
    required: false
    default: '1'
  searchFolder:
    required: true
    default: '${{ github.workspace }}'
  testFiltercriteria:
    required: false
    default: ''
  runOnlyImpactedTests:
    required: false
    default: "false"
  runAllTestsAfterXBuilds:
    required: false
    default: "50"

runs:
  using: 'composite'
  steps:
    - name: Restore dependencies
      shell: pwsh
      run: dotnet restore

    - name: Build solution
      shell: pwsh
      run: dotnet build --configuration ${{ inputs.configuration }} --no-restore

    - name: Debug Directory Structure
      shell: pwsh
      run: |
        # Debug: List all files in the working directory
        $workingDirectory = "${{ env.GITHUB_WORKSPACE }}"
        Set-Location -Path $workingDirectory
        Write-Host "Listing all files in the working directory:"
        Get-ChildItem -Path $workingDirectory -Recurse | ForEach-Object { Write-Host $_.FullName }

    - name: Run tests with Visual Studio Test Runner
      shell: pwsh
      env:
        SEARCH_FOLDER: ${{ inputs.searchFolder }}
      run: |
        # Ensure the correct working directory
        $workingDirectory = $env:SEARCH_FOLDER
        Set-Location -Path $workingDirectory

        # Convert inputs to boolean
        $codeCoverageEnabled = [bool]::Parse("${{ inputs.code-coverage-enabled }}")
        $runInParallel = [bool]::Parse("${{ inputs.run-in-parallel }}")
        $diagnosticsEnabled = [bool]::Parse("${{ inputs.diagnosticsEnabled }}")
        $rerunFailedTests = [bool]::Parse("${{ inputs.rerunFailedTests }}")
        $uiTests = [bool]::Parse("${{ inputs.uiTests }}")
        $runOnlyImpactedTests = [bool]::Parse("${{ inputs.runOnlyImpactedTests }}")
        $runTestsInIsolation = [bool]::Parse("${{ inputs.runTestsInIsolation }}")
        $publishRunAttachments = [bool]::Parse("${{ inputs.publishRunAttachments }}")
        $failOnMinTestsNotRun = [bool]::Parse("${{ inputs.failOnMinTestsNotRun }}")

        # Resolve test assemblies from the bin directory, excluding obj folder
        $testAssemblies = Get-ChildItem -Path $workingDirectory -Recurse -File -Include *.dll |
          Where-Object { $_.FullName -notmatch 'obj' } | ForEach-Object { $_.FullName }
        if (-not $testAssemblies) {
          Write-Error "No test assemblies found."
          exit 1
        }

        # Debug: List resolved test assemblies
        Write-Host "Resolved test assemblies:"
        $testAssemblies | ForEach-Object { Write-Host $_ }

        # Verify vstest.console.exe exists
        $vstestPath = "${{ inputs.vstestLocation }}"
        if (-not (Test-Path -Path $vstestPath -PathType Leaf)) {
          Write-Error "vstest.console.exe not found at path: $vstestPath"
          exit 1
        }

        # Run VSTest for each resolved test assembly
        foreach ($testAssembly in $testAssemblies) {
          # Construct arguments for vstest.console.exe
          $vstestArgs = @()
          $vstestArgs += "`"$testAssembly`"" # Properly quote the test assembly path

          if ($codeCoverageEnabled) { $vstestArgs += '/EnableCodeCoverage' }
          if ($runInParallel) { $vstestArgs += '/Parallel' }
          if ($diagnosticsEnabled) { $vstestArgs += '/Diag:logfile.txt' }
          if ($rerunFailedTests) { $vstestArgs += "/Rerun:${{ inputs.rerunType }}" }
          if (-not [string]::IsNullOrWhiteSpace("${{ inputs.testFiltercriteria }}")) { 
            $vstestArgs += "/TestCaseFilter:`"${{ inputs.testFiltercriteria }}`"" 
          }
          if ($runOnlyImpactedTests) { 
            $vstestArgs += "/ImpactedTests"
            $vstestArgs += "/RunAllTestsAfter:${{ inputs.runAllTestsAfterXBuilds }}"
          }
          if ($uiTests) { $vstestArgs += "/UITests" }
          if ($runTestsInIsolation) { $vstestArgs += "/InIsolation" }

          if (-not [string]::IsNullOrWhiteSpace("${{ inputs.runSettingsFile }}")) { 
            $vstestArgs += "/Settings:`"${{ inputs.runSettingsFile }}`"" 
          }
          if (-not [string]::IsNullOrWhiteSpace("${{ inputs.pathtoCustomTestAdapters }}")) { 
            $vstestArgs += "/TestAdapterPath:`"${{ inputs.pathtoCustomTestAdapters }}`"" 
          }
          if (-not [string]::IsNullOrWhiteSpace("${{ inputs.overrideTestrunParameters }}")) { 
            $vstestArgs += "/OverrideTestrunParameters:`"${{ inputs.overrideTestrunParameters }}`"" 
          }
          if (-not [string]::IsNullOrWhiteSpace("${{ inputs.otherConsoleOptions }}")) { 
            $vstestArgs += "${{ inputs.otherConsoleOptions }}" 
          }

          # Execute vstest.console.exe with call operator (&)
          Write-Host "Executing: `"$vstestPath`" $($vstestArgs -join ' ')"
          & $vstestPath @vstestArgs
        }
